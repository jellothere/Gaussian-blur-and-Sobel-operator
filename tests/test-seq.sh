#!/bin/bash
#set -x

## Just some variables declaration
#The executable to test
declare -r PAR_EXECUTABLE=exec-seq
#The current directory full path
declare -r DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
#The location of the file where to write the output of the tests
declare -r OUTPUTFILE=$DIR'/'test_output.txt
#A variable to determine whether to stop after executing every test
declare press_key_to_continue=$1

## A simple function to wait for input
waitForInput(){
   if [ "$press_key_to_continue" = true ]; then
      echo "Completed. Press any key to continue"
      while [ true ] ; 
      do
         read -t 3 -n 1
         if [ $? = 0 ] ; then
            return ;
         fi
      done
   fi
}

## goodTest is the typical execution of ./exec-par, with 3 arguments
goodTest(){
   #$1 operation
   #$2 input folder
   #$3 output folder

   #Printing info about the test
   echo $PAR_EXECUTABLE $1 $2 $3 | tee -a ${OUTPUTFILE} ##tee redirects the output but also prints to stdout
   
   #Create output directory where to store images
   mkdir $3

   #Running the command
   runcommand='./'$PAR_EXECUTABLE
   eval $runcommand $1 $2 $3 >>$OUTPUTFILE 2>&1

   waitForInput
}

## testAndDiff will not show the output of the execution, but only return whether the files obtained
## and those of the teachers are the same.
testAndDiff(){
   echo $PAR_EXECUTABLE $1 $2 $3 | tee -a $OUTPUTFILE 

   echo "This test will show whether our files are the same as those generated by the teacher"

   mkdir $3
   mkdir $3'professor'

   runcommand='./'$PAR_EXECUTABLE
   eval $runcommand $1 $2 $3 > /dev/null 2>/dev/null
   eval './'image-bi-seq $1 $2 $3'professor' >/dev/null 2>/dev/null

   diff -qs $3 $3'professor' >>$OUTPUTFILE 2>&1

   waitForInput
}

## testAndDiffWithFolder compares the output images with those of a folder
testAndDiffWithFolder(){
   echo $PAR_EXECUTABLE $1 $2 $3 | tee -a $OUTPUTFILE 

   ## $2: Folder to which compare the output

   echo "This test will show whether our files are the same as those in the folder "$2

   mkdir $3

   runcommand='./'$PAR_EXECUTABLE
   eval $runcommand $1 $2 $3 > /dev/null 2>/dev/null

   diff -qs $3 $2 >> $OUTPUTFILE 2>&1

   waitForInput
}

## badTest0 is the execution of ./exec-par with 0 arguments
badTest0(){

   echo $PAR_EXECUTABLE

   mkdir $3

   runcommand='./'$PAR_EXECUTABLE
   eval $runcommand >> $OUTPUTFILE 2>&1

   waitForInput
}

## badTest1 is the execution of ./exec-par with only 1 argument
badTest1(){
   #$1 operation

   echo $PAR_EXECUTABLE $1

   mkdir $3

   runcommand='./'$PAR_EXECUTABLE
   eval $runcommand $1 >> $OUTPUTFILE 2>&1

   waitForInput
}

## badTest2 is the execution of ./exec-par with only 2 arguments
badTest2(){
   #$1 operation
   #$2 input folder
   
   echo $PAR_EXECUTABLE $1 $2

   mkdir $3

   runcommand='./'$PAR_EXECUTABLE
   eval $runcommand $1 $2 >> $OUTPUTFILE 2>&1

   waitForInput
}

## goodTest is the execution of ./exec-par but with an invalid output file.
## the output file will not be created as with other tests, so an error is expected.
badTest3(){
   #$1 operation
   #$2 input folder
   #$3 output folder

   echo $PAR_EXECUTABLE $1 $2 $3

   mkdir 'outputs/output29'

   runcommand='./'$PAR_EXECUTABLE
   eval $runcommand $1 $2 $3 >> $OUTPUTFILE 2>&1

   waitForInput
}

## badTest4 is the execution of ./exec-par with more than 3 arguments (for instance, 4 arguments)
badTest4(){
   #$1 operation
   #$2 input folder
   #$3 output folder
   #$4 extra argument

   #Printing info about the test
   echo $PAR_EXECUTABLE $1 $2 $3 $4 | tee -a ${OUTPUTFILE} ##tee redirects the output but also prints to stdout
   
   #Create output directory where to store images
   mkdir $3

   #Running the command
   runcommand='./'$PAR_EXECUTABLE
   eval $runcommand $1 $2 $3 $4 >>$OUTPUTFILE 2>&1

   waitForInput
}


clear

echo "*** STARTING TEST SCRIPT OF SEQUENTIAL VERSION***"

TDIR="./testdir"
rm -r $TDIR
rm $OUTPUTFILE
mkdir $TDIR

#cp ../Makefile $TDIR
cp ../exec-seq $TDIR
cp image-bi-seq $TDIR


cd $TDIR

mkdir outputs

########PREPARING THE TESTS

#####Tests where we will just check that everything works and we get a valid output.
## Note that the images provided by the professor do not have a field start_of_image_data = 54, 
## but they are 138 or, in the case of the balloon 122.

## Test 1: Copy the images provided by the professor as test images
echo -e "TEST 1" >>${OUTPUTFILE}
echo -n "Test1: -> "
goodTest copy $DIR'/'images_pool/professor_images outputs/output1

## Test 2: Gaussian blur of the images provided by the professor as test images
echo -e "\n\n\nTEST 2" >>${OUTPUTFILE}
echo -n "Test2: -> "
goodTest gauss $DIR'/'images_pool/professor_images outputs/output2

## Test 3: Sobel of the images provided by the professor as test images
echo -e "\n\n\nTEST 3" >>${OUTPUTFILE}
echo -n "Test3: -> "
goodTest sobel $DIR'/'images_pool/professor_images outputs/output3



#####Tests where we check whether the images generated with an operator (copy/gauss/sobel) are the same as the teachers executable would generate.

## Test 4: Operator copy
echo -e "\n\n\nTEST 4" >>${OUTPUTFILE}
echo -n "Test4: -> "
testAndDiff copy $DIR'/'images_pool/professor_images outputs/output4

## Test 5: Operator gauss
echo -e "\n\n\nTEST 5" >>${OUTPUTFILE}
echo -n "Test5: -> "
testAndDiff gauss $DIR'/'images_pool/professor_images outputs/output5

## Test 6: Operator sobel
echo -e "\n\n\nTEST 6" >>${OUTPUTFILE}
echo -n "Test6: -> "
testAndDiff sobel $DIR'/'images_pool/professor_images outputs/output6



#####Tests where we will check if, when using images with start_of_image_data = 54 (which are expected
## in this project), the output images are the same as the input images.
## We will use the images generated as output of the previous tests, which always have start_of_image_data = 54

## Test 7: Copy
echo -e "\n\n\nTEST 7" >>${OUTPUTFILE}
echo -n "Test7: -> "
testAndDiffWithFolder copy outputs/output4 outputs/output7



#####Tests of invalid cases.

## Test 8: Empty directory
echo -e "\n\n\nTEST 8" >>${OUTPUTFILE}
echo -n "Test8: -> "
goodTest copy $DIR'/'images_pool/empty_folder outputs/output8

## Test 9: Non-existing directory
echo -e "\n\n\nTEST 9" >>${OUTPUTFILE}
echo -n "Test9: -> "
goodTest copy $DIR'/'images_pool/none outputs/output9

## Test 10: Directory with a file different than a bmp
echo -e "\n\n\nTEST 10" >>${OUTPUTFILE}
echo -n "Test10: -> "
goodTest copy $DIR'/'images_pool/folder_with_png outputs/output10

## Test 11: Directory with mixed types: bmp and others
echo -e "\n\n\nTEST 11" >>${OUTPUTFILE}
echo -n "Test11: -> "
goodTest copy $DIR'/'images_pool/mixed_folder outputs/output11

## Test 12: Directory with a bmp whose pixels have been artifically corrupted, but with the same size and header.
echo -e "\n\n\nTEST 12" >>${OUTPUTFILE}
echo -n "Test12: -> "
goodTest copy $DIR'/'images_pool/pixels_corrupted outputs/output12

## Test 13: Directory with a bmp whose pixels have been artifically corrupted and some of them are missing. 
## Header is not modified, but the size of the image is now shorter than it is indicated.
echo -e "\n\n\nTEST 13" >>${OUTPUTFILE}
echo -n "Test13: -> "
goodTest copy $DIR'/'images_pool/pixels_missing outputs/output13

## Test 14: Directory with a bmp whose header has been corrupted so that it starts with bytes other than "BM"
echo -e "\n\n\nTEST 14" >>${OUTPUTFILE}
echo -n "Test14: -> "
goodTest copy $DIR'/'images_pool/no_BM outputs/output14

## Test 15: Directory with a bmp whose header has been corrupted so that the file size is 0.
echo -e "\n\n\nTEST 15" >>${OUTPUTFILE}
echo -n "Test15: -> "
goodTest copy $DIR'/'images_pool/bad_file_size outputs/output15

## Test 16: Directory with a bmp whose header has been corrupted so that the start of image data is 0.
echo -e "\n\n\nTEST 16" >>${OUTPUTFILE}
echo -n "Test16: -> "
goodTest copy $DIR'/'images_pool/bad_start_image_data outputs/output16

## Test 17: Directory with a bmp whose header has been corrupted so that pixels width is 0.
echo -e "\n\n\nTEST 17" >>${OUTPUTFILE}
echo -n "Test17: -> "
goodTest copy $DIR'/'images_pool/bad_width outputs/output17

## Test 18: Directory with a bmp whose header has been corrupted so that pixels height is 0.
echo -e "\n\n\nTEST 18" >>${OUTPUTFILE}
echo -n "Test18: -> "
goodTest copy $DIR'/'images_pool/bad_height outputs/output18

## Test 19: Directory with a bmp whose header has been corrupted so that the number of planes is 0.
echo -e "\n\n\nTEST 19" >>${OUTPUTFILE}
echo -n "Test19: -> "
goodTest copy $DIR'/'images_pool/bad_number_planes outputs/output19

## Test 20: Directory with a bmp whose header has been corrupted so that the point size indicates 0 bits.
echo -e "\n\n\nTEST 20" >>${OUTPUTFILE}
echo -n "Test20: -> "
goodTest copy $DIR'/'images_pool/bad_point_size outputs/output20

## Test 21: Directory with a bmp whose header has been corrupted so that the compression value is larger than 0.
echo -e "\n\n\nTEST 21" >>${OUTPUTFILE}
echo -n "Test21: -> "
goodTest copy $DIR'/'images_pool/bad_compression outputs/output21

## Test 22: Directory with a bmp whose header has been corrupted so that the image size is 0.
echo -e "\n\n\nTEST 22" >>${OUTPUTFILE}
echo -n "Test22: -> "
goodTest copy $DIR'/'images_pool/bad_image_size outputs/output22




##### Other tests
## Test 23: Directory with a file which is a bmp but does not have the .bmp extension.
echo -e "\n\n\nTEST 23" >>${OUTPUTFILE}
echo -n "Test23: -> "
goodTest copy $DIR'/'images_pool/no_extension outputs/output23

## Test 24: Directory which cannot be opened because of no permissions
echo -e "\n\n\nTEST 24" >>${OUTPUTFILE}
echo -n "Test24: -> "
goodTest copy $DIR'/'images_pool/no_permission outputs/output24

## Test 25: Writing only one argument (the operation)
echo -e "\n\n\nTEST 25" >>${OUTPUTFILE}
echo -n "Test25: -> "
badTest1 copy $DIR'/'images_pool/professor_images outputs/output25

## Test 26: Writing only two arguments (the operation + the input directory)
echo -e "\n\n\nTEST 26" >>${OUTPUTFILE}
echo -n "Test26: -> "
badTest2 copy $DIR'/'images_pool/professor_images outputs/output26

## Test 27: Writing an incorrect first argument
echo -e "\n\n\nTEST 27" >>${OUTPUTFILE}
echo -n "Test27: -> "
goodTest copi $DIR'/'images_pool/professor_images outputs/output27

## Test 28: Writing an incorrect second argument
echo -e "\n\n\nTEST 28" >>${OUTPUTFILE}
echo -n "Test28: -> "
goodTest copy $DIR'/'ims_pol/proffffesor_images outputs/output28

## Test 29: Writing an incorrect third argument
echo -e "\n\n\nTEST 29" >>${OUTPUTFILE}
echo -n "Test29: -> "
badTest3 copy $DIR'/'images_pool/professor_images outsputx/incorrectoutput29

## Test 30: Writing no arguments
echo -e "\n\n\nTEST 30" >>${OUTPUTFILE}
echo -n "Test30: -> "
badTest0 copy $DIR'/'images_pool/professor_images outputs/output30

## Test 31: Writing more than the allowed arguments
echo -e "\n\n\nTEST 31" >>${OUTPUTFILE}
echo -n "Test31: -> "
badTest4 copy $DIR'/'images_pool/professor_images outputs/output31 extraParameter

## Test 32: Writing the arguments in an incorrect order
echo -e "\n\n\nTEST 32" >>${OUTPUTFILE}
echo -n "Test32: -> "
goodTest $DIR'/'images_pool/professor_images copy outputs/output32 
